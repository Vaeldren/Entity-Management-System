@page "/tickets/edit/{Id:guid}"

@attribute [Authorize]
@inject NavigationManager Navigation
@inject HttpClient Http 
<h3>Ticket Edit</h3>

<EditForm Model="Ticket" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="control-label">Description</label>
        <InputText @bind-Value="Ticket.Description" class="form-control" placeholder=@Ticket.Description />
        <ValidationMessage For="@(() => Ticket.Description)" />
    </div>

    <div class="form-group">
        <label class="control-label">Assigned User</label>
        <select @bind="Ticket.UserId" class="form-control">
            @foreach (var emp in employees)
            {
                <option value="@emp.EmployeeId">@emp.Username</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label class="control-label">Assigned User</label>
        <select class="form-control" @bind="Ticket.Status">
            <option value=Open selected>
                Open
            </option>
            <option value=Pending>
                Pending
            </option>
            <option value=Resolved>
                Resolved
            </option>
            <option value=Closed>
                Closed
            </option>
        </select>
    </div>

    <div class="form-group">
        <label class="control-label">Starting Date</label>
        <InputDate @bind-Value="Ticket.StartDate" class="form-control" default-value="@Ticket.StartDate" />
        <ValidationMessage For="@(() => Ticket.StartDate)" />
    </div>

    <div class="form-group">
        <label class="control-label">End Date</label>
        <InputDate @bind-Value="Ticket.EndDate" class="form-control" default-value="@Ticket.EndDate" />
        <ValidationMessage For="@(() => Ticket.EndDate)" />
    </div>

    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Modify
    </button>
</EditForm>


@code {
    [Parameter] public Guid Id { get; set; }
    private Ticket Ticket { get; set; } = new Ticket();
    public List<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        try {
            Ticket = await Http.GetFromJsonAsync<Ticket>($"/api/Tickets/{Id}");
            employees = await Http.GetFromJsonAsync<List<Employee>>("/api/Employees");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {

        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/Tickets/{Ticket.TicketId}", Ticket);
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/tickets");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {

        }
    }
}
