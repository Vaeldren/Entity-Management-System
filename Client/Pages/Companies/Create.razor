@page "/companies/create"

@attribute [Authorize]
@inject HttpClient Http 
@inject NavigationManager Navigation

<h3>Create Company</h3>

<EditForm Model="Company" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="control-label">Company Name</label>
        <InputText @bind-Value="Company.CompanyName" class="form-control" />
        <ValidationMessage For="@(() => Company.CompanyName)" />
    </div>

    <div class="form-group">
        <label class="control-label">Chief Executive Officer</label>
        <InputText @bind-Value="Company.Ceo" class="form-control" />
        <ValidationMessage For="@(() => Company.Ceo)" />
    </div>

    <div class="form-group">
        <label class="control-label">Employee Count</label>
        <InputNumber @bind-Value="Company.EmployeeCount" class="form-control"/>
        <ValidationMessage For="@(() => Company.EmployeeCount)" />
    </div>

    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Create
    </button>
</EditForm>


@code {
    private Company Company { get; set; } = new Company();
    public List<Company> companies = new List<Company>();

    protected override async Task OnInitializedAsync()
    {
        companies = await Http.GetFromJsonAsync<List<Company>>("/api/Companies");
    }

    private async void HandleValidSubmit()
    {
        try {
            var response = await Http.PostAsJsonAsync("/api/Companies", Company);
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();
            var project = JsonConvert.DeserializeObject<Company>(content);
            Navigation.NavigateTo("/companies");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();

        } catch (Exception e)
        {

        }
    }
}
